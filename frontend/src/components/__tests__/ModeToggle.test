import { render, screen, fireEvent } from '@testing-library/react';
import { useTheme } from 'next-themes';
import ModeToggle from './ModeToggle';

jest.mock('next-themes', () => ({
  useTheme: jest.fn(),
}));

describe('ModeToggle', () => {
  const setThemeMock = jest.fn();

  beforeEach(() => {
    useTheme.mockReturnValue({ setTheme: setThemeMock });
    render(<ModeToggle />);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the toggle button', () => {
    const button = screen.getByRole('button', { name: /toggle theme/i });
    expect(button).toBeInTheDocument();
  });

  it('opens the dropdown menu on button click', () => {
    const button = screen.getByRole('button', { name: /toggle theme/i });
    fireEvent.click(button);
    
    const lightOption = screen.getByText(/light/i);
    const darkOption = screen.getByText(/dark/i);
    const systemOption = screen.getByText(/system/i);

    expect(lightOption).toBeInTheDocument();
    expect(darkOption).toBeInTheDocument();
    expect(systemOption).toBeInTheDocument();
  });

  it('sets the theme to light when the light option is clicked', () => {
    const button = screen.getByRole('button', { name: /toggle theme/i });
    fireEvent.click(button);

    const lightOption = screen.getByText(/light/i);
    fireEvent.click(lightOption);

    expect(setThemeMock).toHaveBeenCalledWith('light');
  });

  it('sets the theme to dark when the dark option is clicked', () => {
    const button = screen.getByRole('button', { name: /toggle theme/i });
    fireEvent.click(button);

    const darkOption = screen.getByText(/dark/i);
    fireEvent.click(darkOption);

    expect(setThemeMock).toHaveBeenCalledWith('dark');
  });

  it('sets the theme to system when the system option is clicked', () => {
    const button = screen.getByRole('button', { name: /toggle theme/i });
    fireEvent.click(button);

    const systemOption = screen.getByText(/system/i);
    fireEvent.click(systemOption);

    expect(setThemeMock).toHaveBeenCalledWith('system');
  });
});
